
#version 430

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
	vec4	position;
	vec4	velocity;
	vec4	acceleration;
	vec4	color;
};

layout(std140, binding = 0) buffer ParticleBlock
{
	Particle particles[];
};

uniform float totalTime;

const float dt = 0.016f;

const float WaveHeight = 0.15f;
const float WaveFrequency = 5.0f;
const vec2 WaveSpeed = vec2(0.35, 1.0f);

const vec4 redColor = vec4(1,0,0,1);
const vec4 greenColor = vec4(0,1,0,1);
const vec4 blueColor = vec4(0,0,1,1);
const vec4 yellowColor = vec4(1,1,0,1);
const vec4 cyanColor = vec4(0,1,1,1);

/////////////////////////////////////////////////////////////////////////////////////////
float RangeRemap(float value, float low1, float high1, float low2, float high2)
{
	return low2 + (value - low1) * (high2 - low2) / (high1 - low1);
}

/////////////////////////////////////////////////////////////////////////////////////////
vec4 HeightBasedColor(float height)
{
	float remappedHeight = RangeRemap(height, 0.0f, WaveHeight, 0.0f, 1.0f);

	vec4 color = vec4(0.55f, 0.55f, 1.0f, 1.0f);
	if(remappedHeight < 0.9f)
		color = blueColor;
	
	return vec4(vec3(remappedHeight), 1.0f) * color;
}

/////////////////////////////////////////////////////////////////////////////////////////
float random (vec2 st) 
{
    return fract(sin(dot(st.xy, vec2(12.9898f,78.233f))) * 43758.5453123f);
}

float noise(vec2 st) 
{
    vec2 i = floor(st);
    vec2 f = fract(st);
    vec2 u = f*f*(3.0-2.0*f);
    return mix( mix( random( i + vec2(0.0,0.0) ),
                     random( i + vec2(1.0,0.0) ), u.x),
                mix( random( i + vec2(0.0,1.0) ),
                     random( i + vec2(1.0,1.0) ), u.x), u.y);
}


/////////////////////////////////////////////////////////////////////////////////////////
Particle SimulateOcean(uint index, Particle data)
{
	Particle newData;

	newData.acceleration = data.acceleration;
	newData.velocity	 = data.velocity;
	
	// extract position data & modify
	vec3 position = data.position.xyz;
	position.y = WaveHeight * noise(vec2(WaveFrequency * position.x + totalTime * WaveSpeed.x, WaveFrequency * position.z * WaveSpeed.y)); 

	// extract lifetime data & modify
	float lifetime = data.position.w - dt;

	newData.position = vec4(position,lifetime);
	newData.color	= HeightBasedColor(position.y);

	return newData;
}

/////////////////////////////////////////////////////////////////////////////////////////
Particle SimulateRingEffect(uint index, Particle data)
{
	Particle newData;
	
	vec3 accel = data.acceleration.xyz;
	vec3 velocity = data.velocity.xyz;

	// extract position data & modify
	vec3 position = data.position.xyz + velocity * dt;

	// extract lifetime data & modify
	float lifetime = data.position.w - 0.01f * dt;

	newData.acceleration = vec4(accel, 1);
	newData.velocity	 = vec4(velocity, 1);
	newData.position = vec4(position,lifetime);
	newData.color		 = data.color;

	return newData;
}

/////////////////////////////////////////////////////////////////////////////////////////
void main()
{	
	uint index = gl_GlobalInvocationID.x;
	
	Particle newParticleData = SimulateOcean(index, particles[index]);

	particles[index] = newParticleData;
}